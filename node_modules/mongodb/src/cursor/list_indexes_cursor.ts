import type { Collection } from '../collection';
<<<<<<< HEAD
import { executeOperation } from '../operations/execute_operation';
import { ListIndexesOperation, type ListIndexesOptions } from '../operations/indexes';
import type { ClientSession } from '../sessions';
import { AbstractCursor, type InitialCursorResponse } from './abstract_cursor';
=======
import { executeOperation, type ExecutionResult } from '../operations/execute_operation';
import { ListIndexesOperation, type ListIndexesOptions } from '../operations/indexes';
import type { ClientSession } from '../sessions';
import { AbstractCursor } from './abstract_cursor';
>>>>>>> c1c7ef32b8a9c7d253610543a14cdbfbd3e3455e

/** @public */
export class ListIndexesCursor extends AbstractCursor {
  parent: Collection;
  options?: ListIndexesOptions;

  constructor(collection: Collection, options?: ListIndexesOptions) {
    super(collection.client, collection.s.namespace, options);
    this.parent = collection;
    this.options = options;
  }

  clone(): ListIndexesCursor {
    return new ListIndexesCursor(this.parent, {
      ...this.options,
      ...this.cursorOptions
    });
  }

  /** @internal */
<<<<<<< HEAD
  async _initialize(session: ClientSession | undefined): Promise<InitialCursorResponse> {
=======
  async _initialize(session: ClientSession | undefined): Promise<ExecutionResult> {
>>>>>>> c1c7ef32b8a9c7d253610543a14cdbfbd3e3455e
    const operation = new ListIndexesOperation(this.parent, {
      ...this.cursorOptions,
      ...this.options,
      session
    });

    const response = await executeOperation(this.parent.client, operation);

<<<<<<< HEAD
=======
    // TODO: NODE-2882
>>>>>>> c1c7ef32b8a9c7d253610543a14cdbfbd3e3455e
    return { server: operation.server, session, response };
  }
}
